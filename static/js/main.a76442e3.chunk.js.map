{"version":3,"sources":["components/info.js","components/form.js","img/pngwing.png","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","className","Form","props","onSubmit","weatherMethod","type","name","required","placeholder","Weather","city","country","temp","humidity","wind","gust","pressure","sunrise","sunset","error","src","sun","width","height","alt","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","cod","setState","sunsetInSec","sys","date","Date","timeSunset","toLocaleTimeString","sunriseInSec","date_2","timeSunrise","main","new_pressure","Math","floor","new_temp","speed","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a76442e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = () => {\r\n    return (\r\n        <div className=\"info\">\r\n            <h2 className=\"heading\">Метео приложение</h2>\r\n            <p className=\"infoSiti\">Погода в вашем городе!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.weatherMethod}>\r\n            <div>\r\n                <input className=\"inpt\" type=\"text\" name=\"city\" required placeholder=\"Введите город\"/>\r\n            </div>\r\n            <div>\r\n                <button className=\"butt\">Узнать погоду</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","export default __webpack_public_path__ + \"static/media/pngwing.f7c59330.png\";","import React from 'react';\r\nimport sun from '../img/pngwing.png'\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div>\r\n            {props.city &&\r\n            <div className=\"weather\">\r\n                <p>Город: {props.city}, {props.country}</p>\r\n                <p>Температура: {props.temp} <sup>o</sup>C</p>\r\n                <p>Влажность: {props.humidity} <span>%</span></p>\r\n                <p>Скорость ветра: {props.wind} м/с</p>\r\n                <p>Порывы ветра до: {props.gust} м/с</p>\r\n                <p>Давление: {props.pressure} мм/рт.с</p>\r\n                <p>Восход солнца: {props.sunrise}</p>\r\n                <p>Заход солнца: {props.sunset}</p>\r\n            </div>\r\n            }\r\n            <p>{props.error}</p>\r\n            <div className=\"sun\">\r\n                <img src={sun} width={200} height={200} alt=\"\"/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\n\nconst API_KEY = \"f8bab3b085275aee05676135a0ab56c5\";\n\nclass App extends React.Component {\n\n    state = {\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        wind: undefined,\n        gust: undefined,\n        pressure: undefined,\n        humidity: undefined,\n        error: undefined\n    }\n\n    gettingWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n\n        if(city != null) {\n            const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`);\n            const data = await api_url.json();\n            console.log(data);\n\n            if (data.cod === '404'){\n                this.setState({\n                    error: \"Введите правильное название города!\"\n                })\n                return;\n            }\n\n            let sunsetInSec = data.sys.sunset;\n            let date = new Date(sunsetInSec*1000);\n            let timeSunset = date.toLocaleTimeString();\n\n            let sunriseInSec = data.sys.sunrise;\n            let date_2 = new Date(sunriseInSec*1000);\n            let timeSunrise = date_2.toLocaleTimeString();\n\n            let pressure = data.main.pressure;\n            let new_pressure = Math.floor(pressure*0.75006);\n\n            const temp = data.main.temp;\n            const new_temp = temp - \"273.15\";\n\n\n            this.setState({\n                temp: Math.floor(new_temp),\n                city: data.name,\n                country: data.sys.country,\n                sunrise: timeSunrise,\n                sunset: timeSunset,\n                wind: data.wind.speed,\n                gust: data.wind.gust,\n                pressure: new_pressure,\n                humidity: data.main.humidity,\n                error: undefined\n            })\n        } else {\n\n            this.setState({\n                temp: undefined,\n                city: undefined,\n                country: undefined,\n                sunrise: undefined,\n                sunset: undefined,\n                wind: undefined,\n                gust: undefined,\n                pressure: undefined,\n                humidity: undefined,\n                error: \"Введите город\"\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n               <div className=\"browser\">\n                   <Info/>\n                   <Form weatherMethod={this.gettingWeather}/>\n                   <Weather\n                       temp={this.state.temp} city={this.state.city} country={this.state.country}\n                       sunrise={this.state.sunrise} sunset={this.state.sunset}\n                       wind={this.state.wind} gust={this.state.gust} pressure={this.state.pressure}\n                       humidity={this.state.humidity} error={this.state.error}/>\n               </div>\n\n            </div>\n        )\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}